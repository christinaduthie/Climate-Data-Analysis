# -*- coding: utf-8 -*-
"""ClimateDataAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h0oW6FKpjXdZsDhQf9bzfzXCGYb60vB0
"""

from google.colab import drive
drive.mount('/content/drive')

# Import necessary files for analysis
import pandas as pd
import numpy as np

# visualization
import matplotlib.pyplot as plt

"""<h2> Climate data analysis on Melbourne, Fl dataset </h2>"""

# Load the data
# Hourly climate data of Melbourne, FL
path="/content/drive/MyDrive/Climate Data/kmlb_hrly_vals_2019.csv"
melbourne_data = pd.read_csv(path)
print(melbourne_data)

"""<h3> Explore the data </h3>"""

# To get the shape of the dataframe
print("Dataset shape: ", melbourne_data.shape)

# Get the summary of dataframe
melbourne_data.info()

# Get the column names
melbourne_data.columns

# To get the description of the dataframe
print("Description of the dataframe:\n ", melbourne_data.describe())

# Detect missing values
print("Missing Values: \n", melbourne_data.isnull())
print("\n", melbourne_data.isnull().sum())

"""<h3> Data Cleaning </h3>"""

# Drop wind_spd column as it has 8759 null values
melbourne_data_decent = melbourne_data.drop(['wind_spd'],axis=1)
print(melbourne_data_decent)

# Impute missing values using the mean
melbourne_data_decent['temp'] = melbourne_data_decent['temp'].fillna(melbourne_data_decent['temp'].mean())
melbourne_data_decent['precip_1hr'] = melbourne_data_decent['precip_1hr'].fillna(melbourne_data_decent['precip_1hr'].mean())
melbourne_data_decent['dewpt'] = melbourne_data_decent['dewpt'].fillna(melbourne_data_decent['dewpt'].mean())

print(melbourne_data_decent.info())

"""<h3> Analysis of data </h3>"""

# total number of hours that it rained using the precipitation values
total_rainy_hours = (melbourne_data_decent['precip_1hr'] > 0).sum()
print("Total rainy hours: ", total_rainy_hours)

# Count the number of rows where temperature is greater than 100
num_hours_above_100 = (melbourne_data_decent['temp'] > 100).sum()
print("Total number of hours when temperature was greater than 100: ", num_hours_above_100)

# Count the number of rows where temperature is below 32
num_hours_below_32 = (melbourne_data_decent['temp'] < 32).sum()
print("Total number of hours when temperature was less than 32: ", num_hours_below_32)

# Average temperature for each month
melbourne_data_decent['time'] = pd.to_datetime(melbourne_data_decent['time'])
# Create a new column 'month' containing the month of each datetime value
melbourne_data_decent['month'] = melbourne_data_decent['time'].dt.month
# Group the data by 'month' and calculate the mean of the 'temp' column for each group
monthly_avg_temp = melbourne_data_decent.groupby('month')['temp'].mean()
print(monthly_avg_temp)

#Sum of rainfall for each month
melbourne_data_decent['time'] = pd.to_datetime(melbourne_data_decent['time'])
melbourne_data_decent['month'] = melbourne_data_decent['time'].dt.month
monthly_sum_rainfall = melbourne_data_decent.groupby('month')['precip_1hr'].sum()

print(monthly_sum_rainfall)

# Total average temperature
avg_temp = melbourne_data_decent['temp'].mean()
print("Total average temperature: ",avg_temp)

# Calculate the humidity using values from the listed hourly temperature (T) and dew point (TD) values
# Function to calculate humidity using the provided formula
def calculate_humidity(temp, dewpt):
    h = 100 * np.exp(17.625 * dewpt / (243.04 + dewpt)) / np.exp(17.625 * temp / (243.04 + temp))
    return h
# Apply the function to each row and assign the result to a new column 'H'
melbourne_data_decent['H'] = melbourne_data_decent.apply(lambda row: calculate_humidity(row['temp'], row['dewpt']), axis=1)

print(melbourne_data_decent['H'])

melbourne_data_decent.columns

"""<h2> Climate data analysis on San Diego, CA dataset </h2>"""

# Load the data
# Hourly climate data of San Diego, CA
npath="/content/drive/MyDrive/Climate Data/ksan_hrly_vals_2019.csv"
sanDiego_data = pd.read_csv(npath)
print(sanDiego_data)

"""<h3> Explore the data </h3>"""

# To get the shape of the dataframe
print("Dataset shape: ", sanDiego_data.shape)

# Get the summary of dataframe
sanDiego_data.info()

# To get the description of the dataframe
print("Description of the dataframe:\n ", sanDiego_data.describe())

# Detect missing values
print("Missing Values: \n", sanDiego_data.isnull())
print("\n", sanDiego_data.isnull().sum())

"""<h3> Data Cleaning </h3>"""

# Drop wind_spd column as it has 8759 null values
sanDiego_data_decent = sanDiego_data.drop(['wind_spd'],axis=1)
print(sanDiego_data_decent)

# Impute missing values using the mean
sanDiego_data_decent['temp'] = sanDiego_data_decent['temp'].fillna(sanDiego_data_decent['temp'].mean())
sanDiego_data_decent['precip_1hr'] = sanDiego_data_decent['precip_1hr'].fillna(sanDiego_data_decent['precip_1hr'].mean())
sanDiego_data_decent['dewpt'] = sanDiego_data_decent['dewpt'].fillna(sanDiego_data_decent['dewpt'].mean())

print(sanDiego_data_decent.info())

"""<h3> Analysis of data </h3>"""

# total number of hours that it rained using the precipitation values
total_rainy_hours_sanDiego = (sanDiego_data_decent['precip_1hr'] > 0).sum()
print("Total rainy hours: ", total_rainy_hours_sanDiego)

# Count the number of rows where temperature is greater than 100
num_hours_above_100_sanDiego = (sanDiego_data_decent['temp'] > 100).sum()
print("Total number of hours when temperature was greater than 100: ", num_hours_above_100_sanDiego)

# Count the number of rows where temperature is below 32
num_hours_below_32_sanDiego = (sanDiego_data_decent['temp'] < 32).sum()
print("Total number of hours when temperature was less than 32: ", num_hours_below_32_sanDiego)

# Average temperature for each month
sanDiego_data_decent['time'] = pd.to_datetime(sanDiego_data_decent['time'])
# Create a new column 'month' containing the month of each datetime value
sanDiego_data_decent['month'] = sanDiego_data_decent['time'].dt.month
# Group the data by 'month' and calculate the mean of the 'temp' column for each group
monthly_avg_temp_sanDiego = sanDiego_data_decent.groupby('month')['temp'].mean()
print(monthly_avg_temp_sanDiego)

#Sum of rainfall for each month
sanDiego_data_decent['time'] = pd.to_datetime(sanDiego_data_decent['time'])
sanDiego_data_decent['month'] = sanDiego_data_decent['time'].dt.month
monthly_sum_rainfall_sanDiego = sanDiego_data_decent.groupby('month')['precip_1hr'].sum()

print(monthly_sum_rainfall_sanDiego)

# Total average temperature
avg_temp_sanDiego = sanDiego_data_decent['temp'].mean()
print("Total average temperature: ",avg_temp_sanDiego)

# Calculate the humidity using values from the listed hourly temperature (T) and dew point (TD) values
# Function to calculate humidity using the provided formula
def calculate_humidity(temp, dewpt):
    h = 100 * np.exp(17.625 * dewpt / (243.04 + dewpt)) / np.exp(17.625 * temp / (243.04 + temp))
    return h
# Apply the function to each row and assign the result to a new column 'H'
sanDiego_data_decent['H'] = sanDiego_data_decent.apply(lambda row: calculate_humidity(row['temp'], row['dewpt']), axis=1)

print(sanDiego_data_decent['H'])

sanDiego_data_decent.columns

"""<h3> <strong>Visualization </strong> </h3"""

#Plot the temperature values as a line graph of both datsets.
# Create the plot
fig, ax = plt.subplots(figsize=(12, 6))

# Plot the temperature values as a line graph - Melbourne climate data
ax.plot(melbourne_data_decent['time'], melbourne_data_decent['temp'], label='Temperature', color='orange')

# Mark the minimum and maximum temperature values on the graph as shaded dots - Melbourne climate data
ax.plot(melbourne_data_decent['time'].iloc[melbourne_data_decent['temp'].idxmin()], melbourne_data_decent['temp'].min(), 'ko', label='Minimum Temperature', color='blue')
ax.plot(melbourne_data_decent['time'].iloc[melbourne_data_decent['temp'].idxmax()], melbourne_data_decent['temp'].max(), 'ko', label='Maximum Temperature',color='red')

# Plot horizontal lines for the average temperature of the year - Melbourne climate data
ax.axhline(y=avg_temp, linestyle='--', color='blue', label='Average Temperature')

# Set the title and axis labels - Melbourne climate data
ax.set_title('Hourly Temperature in Melbourne, FL')
ax.set_xlabel('Time')
ax.set_ylabel('Values')

# Add a legend and display the plot - Melbourne climate data
ax.legend()
plt.show()

# San Diego Climate data
# Create the plot
fig, ax = plt.subplots(figsize=(12, 6))

# Plot the temperature values as a line graph - San Diego climate data
ax.plot(sanDiego_data_decent['time'], sanDiego_data_decent['temp'], label='Temperature', color='orange')

# Mark the minimum and maximum temperature values on the graph as shaded dots - San Diego climate data
ax.plot(sanDiego_data_decent['time'].iloc[sanDiego_data_decent['temp'].idxmin()], sanDiego_data_decent['temp'].min(), 'ko', label='Minimum Temperature', color='blue')
ax.plot(sanDiego_data_decent['time'].iloc[sanDiego_data_decent['temp'].idxmax()], sanDiego_data_decent['temp'].max(), 'ko', label='Maximum Temperature',color='red')

# Plot horizontal lines for the average temperature of the year - San Diego climate data
ax.axhline(y=avg_temp_sanDiego, linestyle='--', color='blue', label='Average Temperature')

# Set the title and axis labels - San Diego climate data
ax.set_title('Hourly Temperature in San Diego, CA')
ax.set_xlabel('Time')
ax.set_ylabel('Values')

# Add a legend and display the plot - San Diego climate data
ax.legend()
plt.show()

#Plot the humidity values as a line graph - Melbourne climate data
avg_hum = melbourne_data_decent['H'].mean()

# Create the plot
fig, ax = plt.subplots(figsize=(12, 6))

# Plot the humidity values as a line graph - Melbourne climate data
ax.plot(melbourne_data_decent['time'], melbourne_data_decent['H'], label='Humidity',color='pink')

# Plot horizontal lines for the average humidity of the year - Melbourne climate data
ax.axhline(y=avg_hum, linestyle='--', color='blue', label='Average Humidity')

# Set the title and axis labels - Melbourne climate data
ax.set_title('Hourly Humidity in Melbourne, FL')
ax.set_xlabel('Time')
ax.set_ylabel('Value')

# Add a legend and display the plot - Melbourne climate data
ax.legend()
plt.show()

#San Diego
#Plot the humidity values as a line graph - San Diego climate data
avg_hum_sanDiego = sanDiego_data_decent['H'].mean()

# Create the plot
fig, ax = plt.subplots(figsize=(12, 6))

# Plot the humidity values as a line graph - San Diego climate data
ax.plot(sanDiego_data_decent['time'], sanDiego_data_decent['H'], label='Humidity',color='pink')

# Plot horizontal lines for the average humidity of the year - San Diego climate data
ax.axhline(y=avg_hum_sanDiego, linestyle='--', color='blue', label='Average Humidity')

# Set the title and axis labels - San Diego climate data
ax.set_title('Hourly Humidity in San Diego, CA')
ax.set_xlabel('Time')
ax.set_ylabel('Value')

# Add a legend and display the plot - San Diego climate data
ax.legend()
plt.show()

# Convert the 'time' column to time format
sanDiego_data_decent['time'] = pd.to_datetime(sanDiego_data_decent['time'])
melbourne_data_decent['time'] = pd.to_datetime(melbourne_data_decent['time'])

# Extract the month from the 'time' column
sanDiego_data_decent['month'] = sanDiego_data_decent['time'].dt.month
melbourne_data_decent['month'] = melbourne_data_decent['time'].dt.month

# Calculate the monthly average temperature for San Diego
sd_monthly = sanDiego_data_decent.groupby('month')['temp'].mean()

# Calculate the monthly average temperature for Melbourne
melb_monthly = melbourne_data_decent.groupby('month')['temp'].mean()

# Create a grouped bar plot for both cities
fig, ax = plt.subplots(figsize=(18, 5))
bar_width = 0.35
x_pos = np.arange(len(sd_monthly))

ax.bar(x_pos, sd_monthly, bar_width, label='San Diego')
ax.bar(x_pos + bar_width, melb_monthly, bar_width, label='Melbourne')

# Add labels, title, and legend to the plot
ax.set_xlabel('Month')
ax.set_ylabel('Temperature (F)')
ax.set_title('Monthly Average Temperature Comparison')
ax.set_xticks(x_pos + bar_width / 2)
ax.set_xticklabels(sd_monthly.index)
ax.legend()

# Show the plot
plt.show()

sanDiego_data_decent['time'] = pd.to_datetime(sanDiego_data_decent['time'])
melbourne_data_decent['time'] = pd.to_datetime(melbourne_data_decent['time'])

# Extract the month from the 'time' column
sanDiego_data_decent['month'] = sanDiego_data_decent['time'].dt.month
melbourne_data_decent['month'] = melbourne_data_decent['time'].dt.month

# Calculate the monthly average temperature for San Diego
sd_monthly = sanDiego_data_decent.groupby('month')['H'].mean()

# Calculate the monthly average temperature for Melbourne
melb_monthly = melbourne_data_decent.groupby('month')['H'].mean()

# Create a grouped bar plot for both cities
fig, ax = plt.subplots(figsize=(18, 5))
bar_width = 0.35
x_pos = np.arange(len(sd_monthly))

ax.bar(x_pos, sd_monthly, bar_width, label='San Diego')
ax.bar(x_pos + bar_width, melb_monthly, bar_width, label='Melbourne')

# Add labels, title, and legend to the plot
ax.set_xlabel('Month')
ax.set_ylabel('Humidity')
ax.set_title('Monthly Humidity Comparison')
ax.set_xticks(x_pos + bar_width / 2)
ax.set_xticklabels(sd_monthly.index)
ax.legend()

# Show the plot
plt.show()

sanDiego_data_decent['time'] = pd.to_datetime(sanDiego_data_decent['time'])
melbourne_data_decent['time'] = pd.to_datetime(melbourne_data_decent['time'])

# Extract the month from the 'time' column
sanDiego_data_decent['month'] = sanDiego_data_decent['time'].dt.month
melbourne_data_decent['month'] = melbourne_data_decent['time'].dt.month

# Calculate the monthly average temperature for San Diego
sd_monthly = sanDiego_data_decent.groupby('month')['precip_1hr'].sum()

# Calculate the monthly average temperature for Melbourne
melb_monthly = melbourne_data_decent.groupby('month')['precip_1hr'].sum()

# Create a grouped bar plot for both cities
fig, ax = plt.subplots(figsize=(18, 5))
bar_width = 0.35
x_pos = np.arange(len(sd_monthly))

ax.bar(x_pos, sd_monthly, bar_width, label='San Diego')
ax.bar(x_pos + bar_width, melb_monthly, bar_width, label='Melbourne')

# Add labels, title, and legend to the plot
ax.set_xlabel('Month')
ax.set_ylabel('Hours Rained')
ax.set_title('Monthly Rainfall Comparison')
ax.set_xticks(x_pos + bar_width / 2)
ax.set_xticklabels(sd_monthly.index)
ax.legend()

# Show the plot
plt.show()